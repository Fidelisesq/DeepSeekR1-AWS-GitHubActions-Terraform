name: Deploying DeepSeek Model R1 on AWS via Terraform & GitHub Actions

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action (apply/destroy)"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

  apply:
    runs-on: ubuntu-latest
    outputs:
      ec2_instance_id: ${{ steps.get_ec2_id.outputs.ec2_id }}
    needs: setup
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'destroy'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Create terraform.tfvars
        run: |
          cat <<EOF > terraform.tfvars
          ami_id = "${{ secrets.AMI_ID }}"
          certificate_arn = "${{ secrets.CERTIFICATE_ARN }}"
          vpc_id = "${{ secrets.VPC_ID }}"
          hosted_zone_id = "${{ secrets.HOSTED_ZONE_ID }}"
          instance_type = "${{ secrets.INSTANCE_TYPE }}"
          aws_access_key_id = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws_secret_access_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws_region = "${{ secrets.AWS_DEFAULT_REGION }}"
          public_subnet_ids = ${{ secrets.PUBLIC_SUBNET_IDS }}
          private_subnet_ids = ${{ secrets.PRIVATE_SUBNET_IDS }}
          EOF

      - name: Mask AWS Account ID in Logs
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Terraform Init & Apply
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=infra.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}"
          terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Retrieve EC2 Instance ID
        id: get_ec2_id
        run: |
          echo "Retrieving EC2 Instance ID..."
          EC2_ID=$(terraform output -raw deepseek_ec2_id)
          echo "EC2_INSTANCE_ID=$EC2_ID" >> $GITHUB_ENV
          echo "::set-output name=ec2_id::$EC2_ID"
        

      - name: Verify EC2 Instance ID
        run: |
          echo "EC2_INSTANCE_ID=${{ env.EC2_INSTANCE_ID }}"
          if [ -z "${{ env.EC2_INSTANCE_ID }}" ]; then
            echo "EC2 instance ID is empty or invalid."
            exit 1
          fi
          
      - name: Wait for EC2
        run: sleep 60    

  post_apply:
    runs-on: ubuntu-latest
    needs: apply
    if: success()
    env:
      EC2_INSTANCE_ID: ${{ needs.apply.outputs.ec2_instance_id }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}


      - name: Create terraform.tfvars
        run: |
          cat <<EOF > terraform.tfvars
          ami_id = "${{ secrets.AMI_ID }}"
          certificate_arn = "${{ secrets.CERTIFICATE_ARN }}"
          vpc_id = "${{ secrets.VPC_ID }}"
          hosted_zone_id = "${{ secrets.HOSTED_ZONE_ID }}"
          instance_type = "${{ secrets.INSTANCE_TYPE }}"
          aws_access_key_id = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws_secret_access_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws_region = "${{ secrets.AWS_DEFAULT_REGION }}"
          public_subnet_ids = ${{ secrets.PUBLIC_SUBNET_IDS }}
          private_subnet_ids = ${{ secrets.PRIVATE_SUBNET_IDS }}
          EOF

    
      - name: Verify SSM Connection
        run: |
          echo "Verifying SSM Connection..."
          aws ssm describe-instance-information --region ${{ secrets.AWS_DEFAULT_REGION }} \
            --query "InstanceInformationList[?InstanceId=='${{ env.EC2_INSTANCE_ID }}']" \
            --output json
        

      - name: Check SSM Agent Status
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --parameters '{"commands":["sudo systemctl status amazon-ssm-agent"]}' \
            --region ${{ secrets.AWS_DEFAULT_REGION }}
        #env:
          #TF_LOG: DEBUG
               

      - name: Install Docker via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ env.EC2_INSTANCE_ID }}\"]}]" \
            --parameters commands='[
              "sudo apt-get update",
              "sudo apt-get install -y docker.io docker-compose",
              "sudo systemctl enable docker",
              "sudo systemctl start docker",
              "sudo usermod -aG docker ubuntu",
              "sudo sed -i s/^ENABLED=1/ENABLED=0/ /etc/apt/apt.conf.d/20auto-upgrades",
              "sleep 10",
              "sudo reboot"
            ]' \
            --region ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Wait for EC2 instance to reboot ..."
        run: sleep 50


      - name: Run DeepSeek Model and WebUI via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"${{ env.EC2_INSTANCE_ID }}\"]}]" \
            --parameters commands='[
              "docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama",
              "sleep 20",
              "docker exec ollama ollama pull deepseek-r1:8b",
              "sleep 15",
              "docker exec -d ollama ollama serve",
              "sleep 15",
              "docker run -d -p 8080:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main",
              "sleep 15"
            ]' \
            --region ${{ secrets.AWS_DEFAULT_REGION }}
      
          echo "Waiting for WebUI to start..."
          sleep 30              

      - name: Confirm WebUI is Running
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instanceIds","Values":["${{ env.EC2_INSTANCE_ID }}"]}]' \
            --parameters '{"commands":["curl -I https://deepseek.fozdigitalz.com"]}' \
            --region ${{ secrets.AWS_DEFAULT_REGION }}

  destroy:
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy') ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'destroy'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
      - name: Create terraform.tfvars
        run: |
          cat <<EOF > terraform.tfvars
          ami_id = "${{ secrets.AMI_ID }}"
          certificate_arn = "${{ secrets.CERTIFICATE_ARN }}"
          vpc_id = "${{ secrets.VPC_ID }}"
          hosted_zone_id = "${{ secrets.HOSTED_ZONE_ID }}"
          instance_type = "${{ secrets.INSTANCE_TYPE }}"
          aws_access_key_id = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws_secret_access_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws_region = "${{ secrets.AWS_DEFAULT_REGION }}"
          public_subnet_ids = ${{ secrets.PUBLIC_SUBNET_IDS }}
          private_subnet_ids = ${{ secrets.PRIVATE_SUBNET_IDS }}
          EOF
  
      - name: Mask AWS Account ID in Logs
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Terraform Destroy
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=infra.tfstate" \
            -backend-config="region=${{ secrets.AWS_DEFAULT_REGION }}"
          terraform destroy -auto-approve -var-file=terraform.tfvars
